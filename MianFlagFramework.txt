-- Originally created by Red. Modified by MianReplicate

-- A flag framework that allows for flag mutators to be much more compatible with each other while maintaining performance, allowing for additional customization and removing redundant code

behaviour("MianFlagFramework")

function MianFlagFramework:Awake()
	self.Flags = ActorManager.capturePoints
	self.OverrideVanillaFlagColor = self.script.mutator.GetConfigurationBool("OverrideVanillaFlagColor")
	self.ChangeTeamNamesToFlagName = self.script.mutator.GetConfigurationBool("ChangeTeamNamesToFlagName")
	self.ChangeTeamColorToFlagColor = self.script.mutator.GetConfigurationBool("ChangeTeamColorToFlagColor")
	self.DefaultWaitTimer = self.script.mutator.GetConfigurationInt("WaitForMutators")

	self.TeamToMaterialData = {}
	self.MaterialData = {}
	self.WaitTimer = DefaultWaitTimer
	self.FinishedAddingMaterials = false
	self.IsCloth = self.targets.IsCloth

	self.TeamToName = {
		[Team.Blue] = "Blue",
		[Team.Red] = "Red", 
		[Team.Neutral] = "Neutral"
	}
	self.TeamToFlagColor = {
		[Team.Blue] = {},
		[Team.Red] = {}
	}

	for team, name in pairs(self.TeamToName) do
		if(name ~= "Neutral") then
			local color = self.script.mutator.GetConfigurationString(name.."FlagColor")
			for value in string.gmatch(color, '([^,]+)') do
				local number = tonumber(value) or 255
				table.insert(self.TeamToFlagColor[team], math.max(0, math.min(255, number)) / 255)
			end
		end
	end

	for team, name in pairs(self.TeamToName) do
		self.TeamToMaterialData[team] = {}
	end
end

function MianFlagFramework:Start()
	for i, capturePoint in pairs(self.Flags) do
		local team = capturePoint.defaultOwner
		if(not self.TeamToMaterialData[team].fallback) then
			print("Adding temporary material for "..self.TeamToName[team])
			self.TeamToMaterialData[team].fallback = capturePoint.flagRenderer.material

			if(self.OverrideVanillaFlagColor and team ~= Team.Neutral) then
				local customFlagColor = self.TeamToFlagColor[capturePoint.defaultOwner]
				self.TeamToMaterialData[capturePoint.defaultOwner].fallback.color = Color(customFlagColor[1],customFlagColor[2],customFlagColor[3],1)
			end
		end

		self:autoSetPointMaterial(capturePoint)

		self.script.AddValueMonitor("pendingOwner", "onPendingOwnerChanged", capturePoint)
	end

	GameEvents.onCapturePointCaptured.AddListener(self,"autoSetPointMaterial")
	GameEvents.onCapturePointNeutralized.AddListener(self,"autoSetPointMaterial")
end

function MianFlagFramework:addMaterialData(mutatorName, material, teamColor)
	if(self.FinishedAddingMaterials) then
		error(mutatorName.." just tried to add a material outside of registration period. Cannot add "..material.name)
	end

	if(not material or not teamColor) then
		error("No material or team color provided by "..mutatorName.."!")
	end

	if(self:getMaterialData(material.name)) then
		error(material.name.." is an already added material!")
		return
	end

	local mutatorTable = self.MaterialData[string.upper(mutatorName)] or {}

	print("Added new material from "..mutatorName..": "..material.name)
	mutatorTable[string.upper(material.name)] = {material=material,teamColor=teamColor}

	self.MaterialData[string.upper(mutatorName)] = self.MaterialData[string.upper(mutatorName)] or mutatorTable
	self.WaitTimer = self.DefaultWaitTimer
end

function MianFlagFramework:getMaterialDatasFromMutator(name)
	return self.MaterialData[string.upper(name)]
end

function MianFlagFramework:getMaterialData(name)
	for _, matDatas in pairs(self.MaterialData) do
		local matData = matDatas[string.upper(name)]
		if(matData) then
			return matData
		end
	end

	return null
end

function MianFlagFramework:getAllMaterialDatas()
	local MaterialData = {}

	for _, matDatas in pairs(self.MaterialData) do
		for name, matData in pairs(matDatas) do
			MaterialData[name] = matData
		end
	end

	return MaterialData
end

function MianFlagFramework:putFlagMaterialForTeam(team, material)
	if(not team or not material) then
		return
	end

	if(not self:getMaterialData(material.name)) then
		error(material.name.." is not a stored flag material! Please add it first and then use it")
	end

	if(self.TeamToMaterialData[team][material.name]) then
		print(material.name.." was already added into "..self.TeamToName[team].."!")
		return
	end
	
	print(material.name.." is being added to "..self.TeamToName[team])
	local customFlagColor = self.TeamToFlagColor[team]
	material.color = Color(customFlagColor[1],customFlagColor[2],customFlagColor[3],1)

	local yScale = (self.IsCloth.activeSelf and 1.4) or 1
	material.SetTextureScale("_MainTex", Vector2(1, yScale))	

	self.TeamToMaterialData[team][material.name] = material
	self.TeamToMaterialData[team].fallback = nil -- No need for a fallback anymore
end

function MianFlagFramework:Update()
	if(not self.FinishedAddingMaterials) then
		self.WaitTimer = self.WaitTimer - Time.deltaTime
		if(self.WaitTimer <= 0) then
			self.FinishedAddingMaterials = true
			print("All materials seem to have been added: Starting framework..")

			local AllMaterialData = self:getAllMaterialDatas()
			local randomizationPool = {}

			for team, name in pairs(self.TeamToName) do
				if(name ~= "Neutral") then
					local materials = self.script.mutator.GetConfigurationString(name.."FlagMaterial")
					local randomize = self.script.mutator.GetConfigurationInt(name.."RandomizeFlagMaterials")
					local firstMaterial = nil
					local lastMaterial = nil

					if(self:getLengthOfDict(AllMaterialData) > 0) then
						if(randomize and randomize > 0) then
							while(randomize > 0) do
								if(#randomizationPool <= 0) then
									-- Add all flags to randomization pool
									for name, _ in pairs(AllMaterialData) do
										table.insert(randomizationPool, name)
									end
								end
	
								local randomIndex = math.random(1, #randomizationPool)
								local randomMat = randomizationPool[randomIndex]
								table.remove(randomizationPool, randomIndex)
								randomize = randomize - 1
	
								local matData = self:getMaterialData(randomMat)
								self:putFlagMaterialForTeam(team, matData.material)
	
								firstMaterial = firstMaterial or matData
								lastMaterial = matData
							end
						else
							for name in materials:gmatch('([^,]+)') do
								local specialText = name:match("{(.*)}")
								local wasValidText = false
								if(specialText) then
									specialText = specialText:upper()
									if(specialText:match("ALL")) then
										for _, matData in pairs(AllMaterialData) do
											self:putFlagMaterialForTeam(team, matData.material)
	
											firstMaterial = firstMaterial or matData
											lastMaterial = matData
										end
										wasValidText = true
										break
									else
										local matDatas = self:getMaterialDatasFromMutator(specialText)
										if(matDatas) then
											for _, matData in pairs(matDatas) do
												self:putFlagMaterialForTeam(team, matData.material)
		
												firstMaterial = firstMaterial or matData
												lastMaterial = matData
											end
											wasValidText = true
										end
									end
								end

								if(not wasValidText) then
									local matData = self:getMaterialData(name)
									if(matData) then
										self:putFlagMaterialForTeam(team, matData.material)
			
										firstMaterial = firstMaterial or matData
										lastMaterial = matData
									else
										print(name.." is an invalid material! Did you name it incorrectly?")
									end
								end
							end
						end
					end

					if(firstMaterial and lastMaterial) then
						local teamSpecific = (team == Team.Blue and "") or (team == Team.Red and " (1)")
						if(self.ChangeTeamNamesToFlagName) then
							local name = (firstMaterial == lastMaterial and firstMaterial.material.name:upper()) or firstMaterial.material.name:upper().." ALLIES"
					
							GameManager.SetTeamName(team, name)
							GameObject.Find("Scoreboard Canvas/Panel/Team Panel"..teamSpecific.."/Header Panel/Text Team").GetComponent(Text).text = name
						end
				
						if(self.ChangeTeamColorToFlagColor) then
							local color = firstMaterial.teamColor
							ColorScheme.SetTeamColor(team, color)
							ColorScheme.SetTeamBloodColor(team, color)
							color.a = 0.392
							GameObject.Find("Scoreboard Canvas/Panel/Team Panel"..teamSpecific.."/Header Panel").GetComponent(Image).color = color
						end

						for i, capturePoint in pairs(self.Flags) do
							if(capturePoint.defaultOwner == team) then
								self:setPointMaterial(capturePoint, firstMaterial.material)
							end
						end
					end
				end
			end
		end
	end
end

function MianFlagFramework:autoSetPointMaterial(capturePoint)
	local ownerToUse = capturePoint.pendingOwner or capturePoint.owner
	local materials = self.TeamToMaterialData[ownerToUse]
	local length = self:getLengthOfDict(materials)

	if(length <= 0) then
		print("No materials to use for "..self.TeamToName[ownerToUse]) 
		return
	end

	local currentMaterial = capturePoint.flagRenderer.material
	if(materials[currentMaterial.name]) then
		return 
		-- No need to replace the material if it's from the same team. This is so when raising the flag, it doesn't just change materials when it gets captured when it is the same team.
	end

	material = self:getRandomFromDict(materials)
	self:setPointMaterial(capturePoint, material)
end


function MianFlagFramework:setPointMaterial(capturePoint, material)
	capturePoint.flagRenderer.material = material
	if(self:isOurMaterial(material) or self.OverrideVanillaFlagColor) then
		-- Have to be special here since Ravenfield just changes the color of their cloths for the teams
		capturePoint.flagRenderer.material.color = material.color
	end
	capturePoint.flagRenderer.material.SetTextureScale("_MainTex", material.GetTextureScale("_MainTex"))
end

function MianFlagFramework:pendingOwner()
	return CurrentEvent.listenerData.pendingOwner
end

function MianFlagFramework:onPendingOwnerChanged()
	self:autoSetPointMaterial(CurrentEvent.listenerData)
end

function MianFlagFramework:isSameMaterial(material, material2)
	return material.mainTexture == material2.mainTexture
end

function MianFlagFramework:isOurMaterial(material)
	for name, matData in pairs(self.MaterialData) do
		if(matData.material == material) then
			return matData.material
		end
	end

	return false;
end

function MianFlagFramework:getRandomFromDict(dict)
	local names = {}
	for name, _ in pairs(dict) do
		table.insert(names, name)
	end

	local randomName = names[math.random(1, #names)]
	return dict[randomName]
end

function MianFlagFramework:getLengthOfDict(dict)
	local count = 0
	for _, value in pairs(dict) do
		count = count + 1
	end
	return count;
end